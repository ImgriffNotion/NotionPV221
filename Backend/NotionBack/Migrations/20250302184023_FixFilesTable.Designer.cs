// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace NotionBack.Migrations
{
    [DbContext(typeof(NotionDbContext))]
    [Migration("20250302184023_FixFilesTable")]
    partial class FixFilesTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NotionBack.DAL.Models.Page", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Banner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TypeId");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.TypePage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PageTypes", (string)null);
                });

            modelBuilder.Entity("NotionBack.DAL.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("NotionBack.DAL.Models.fileStructure.CalendarFile", b =>
                {
                    b.Property<Guid>("FileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CalendarContentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FileId", "CalendarContentId");

                    b.HasIndex("CalendarContentId");

                    b.ToTable("CalendarFile");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.fileStructure.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.fileStructure.ListFile", b =>
                {
                    b.Property<Guid>("FileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ListContentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FileId", "ListContentId");

                    b.HasIndex("ListContentId");

                    b.ToTable("ListFile");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.pageContents.Board", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ParentPageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentPageId");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.pageContents.Calendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParentPageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentPageId");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.pageContents.Gallery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ParentPageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentPageId");

                    b.ToTable("Galleries");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.pageContents.JustPageContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<Guid>("ParentPageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentPageId");

                    b.ToTable("JustPageContents");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.pageContents.List", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BoardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ParentPageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.HasIndex("ParentPageId");

                    b.ToTable("Lists");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.pageContents.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Columns")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ParentPageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rows")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentPageId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.pageContents.pageInPageContents.CalendarContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CalendarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PlanedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Untitled")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.ToTable("CalendarContents");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.pageContents.pageInPageContents.GalleryContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GalleryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GalleryId");

                    b.ToTable("GalleryContents");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.pageContents.pageInPageContents.ListContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ListId");

                    b.ToTable("ListContents");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.pageContents.pageInPageContents.TableContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Background")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Column")
                        .HasColumnType("int");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Foreground")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Row")
                        .HasColumnType("int");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("TableContents");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.Page", b =>
                {
                    b.HasOne("NotionBack.DAL.Models.User", "Owner")
                        .WithMany("Pages")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("NotionBack.DAL.Models.TypePage", "Type")
                        .WithMany("Pages")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Owner");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.fileStructure.CalendarFile", b =>
                {
                    b.HasOne("NotionBack.DAL.Models.pageContents.pageInPageContents.CalendarContent", "CalendarContent")
                        .WithMany("Files")
                        .HasForeignKey("CalendarContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NotionBack.DAL.Models.fileStructure.File", "File")
                        .WithMany("CalendarFiles")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CalendarContent");

                    b.Navigation("File");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.fileStructure.ListFile", b =>
                {
                    b.HasOne("NotionBack.DAL.Models.fileStructure.File", "File")
                        .WithMany("ListFiles")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NotionBack.DAL.Models.pageContents.pageInPageContents.ListContent", "ListContent")
                        .WithMany("Files")
                        .HasForeignKey("ListContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("ListContent");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.pageContents.Board", b =>
                {
                    b.HasOne("NotionBack.DAL.Models.Page", "ParentPage")
                        .WithMany("Boards")
                        .HasForeignKey("ParentPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentPage");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.pageContents.Calendar", b =>
                {
                    b.HasOne("NotionBack.DAL.Models.Page", "ParentPage")
                        .WithMany("Calendars")
                        .HasForeignKey("ParentPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentPage");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.pageContents.Gallery", b =>
                {
                    b.HasOne("NotionBack.DAL.Models.Page", "ParentPage")
                        .WithMany("Galleries")
                        .HasForeignKey("ParentPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentPage");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.pageContents.JustPageContent", b =>
                {
                    b.HasOne("NotionBack.DAL.Models.Page", "ParentPage")
                        .WithMany("JustPageContents")
                        .HasForeignKey("ParentPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentPage");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.pageContents.List", b =>
                {
                    b.HasOne("NotionBack.DAL.Models.pageContents.Board", "Board")
                        .WithMany("Lists")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NotionBack.DAL.Models.Page", "ParentPage")
                        .WithMany("Lists")
                        .HasForeignKey("ParentPageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Board");

                    b.Navigation("ParentPage");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.pageContents.Table", b =>
                {
                    b.HasOne("NotionBack.DAL.Models.Page", "ParentPage")
                        .WithMany("Tables")
                        .HasForeignKey("ParentPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentPage");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.pageContents.pageInPageContents.CalendarContent", b =>
                {
                    b.HasOne("NotionBack.DAL.Models.pageContents.Calendar", "Calendar")
                        .WithMany("Contents")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calendar");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.pageContents.pageInPageContents.GalleryContent", b =>
                {
                    b.HasOne("NotionBack.DAL.Models.pageContents.Gallery", "Gallery")
                        .WithMany("Contents")
                        .HasForeignKey("GalleryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gallery");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.pageContents.pageInPageContents.ListContent", b =>
                {
                    b.HasOne("NotionBack.DAL.Models.pageContents.List", "List")
                        .WithMany("Contents")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("List");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.pageContents.pageInPageContents.TableContent", b =>
                {
                    b.HasOne("NotionBack.DAL.Models.pageContents.Table", "Table")
                        .WithMany("Contents")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.Page", b =>
                {
                    b.Navigation("Boards");

                    b.Navigation("Calendars");

                    b.Navigation("Galleries");

                    b.Navigation("JustPageContents");

                    b.Navigation("Lists");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.TypePage", b =>
                {
                    b.Navigation("Pages");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.User", b =>
                {
                    b.Navigation("Pages");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.fileStructure.File", b =>
                {
                    b.Navigation("CalendarFiles");

                    b.Navigation("ListFiles");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.pageContents.Board", b =>
                {
                    b.Navigation("Lists");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.pageContents.Calendar", b =>
                {
                    b.Navigation("Contents");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.pageContents.Gallery", b =>
                {
                    b.Navigation("Contents");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.pageContents.List", b =>
                {
                    b.Navigation("Contents");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.pageContents.Table", b =>
                {
                    b.Navigation("Contents");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.pageContents.pageInPageContents.CalendarContent", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("NotionBack.DAL.Models.pageContents.pageInPageContents.ListContent", b =>
                {
                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
